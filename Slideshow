<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Screensaver</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: Arial, sans-serif;
            background: black;
            color: #fff;
        }

        #main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        #slideshow-container {
            width: 100%;
            padding-top: 56.25%;
            position: relative;
            background: #111;
            margin-bottom: 10px;
            border: 1px solid #333;
        }

        #slideshow-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        #thumbnail-history {
            width: 100%;
            margin: 0 auto 20px auto;
            background: rgba(0, 0, 0, 0.8);
            padding: 10px 0;
        }

        .thumbnail-container {
            display: flex;
            gap: 10px;
            padding: 0 10px;
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: #666 #333;
        }

        .thumbnail-container::-webkit-scrollbar {
            height: 8px;
        }

        .thumbnail-container::-webkit-scrollbar-track {
            background: #333;
        }

        .thumbnail-container::-webkit-scrollbar-thumb {
            background: #666;
            border-radius: 4px;
        }

        .thumbnail {
            flex: 0 0 160px;
            width: 160px;
            height: 90px;
            object-fit: cover;
            border: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            border-color: #007AFF;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 122, 255, 0.3);
        }

        #controls {
            background-color: #1a1a1a;
            border: 1px solid #333;
            border-radius: 4px;
            padding: 15px;
            margin-top: 20px;
        }

        .control-row {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
            padding: 15px 0;
        }

        .control-row:first-child {
            padding-top: 0;
        }

        .control-row + .control-row {
            border-top: 1px solid #333;
        }

        #prompt-textarea {
            flex: 1;
            min-height: 80px;
            width: 100%;
            padding: 12px;
            border: 1px solid #444;
            border-radius: 4px;
            font-size: 14px;
            background: #2a2a2a;
            color: #fff;
            resize: vertical;
            font-family: Arial, sans-serif;
            transition: all 0.2s ease;
        }

        #prompt-textarea:hover {
            border-color: #555;
        }

        #prompt-textarea:focus {
            border-color: #007AFF;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.2);
        }

        select, input, button {
            padding: 8px;
            border: 1px solid #444;
            border-radius: 4px;
            font-size: 14px;
            background: #2a2a2a;
            color: #fff;
            transition: all 0.2s ease;
        }

        select {
            min-width: 150px;
            cursor: pointer;
        }

        select:hover, input:hover {
            border-color: #555;
        }

        select:focus, input:focus {
            border-color: #007AFF;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.2);
        }

        select option, select optgroup {
            background: #2a2a2a;
            color: #fff;
        }

        button {
            background: #007AFF;
            color: white;
            border: none;
            cursor: pointer;
            padding: 8px 16px;
            transition: all 0.2s ease;
        }

        button:hover {
            background: #0056b3;
            transform: translateY(-1px);
        }

        button:active {
            transform: translateY(0);
        }

        #toggleButton {
            background: #28a745;
            font-weight: bold;
            margin-right: 15px;
            order: -1;
        }

        #toggleButton:hover {
            background: #218838;
        }

        .checkbox-group {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 5px;
            white-space: nowrap;
            color: #fff;
            user-select: none;
        }

        input[type="checkbox"] {
            width: 16px;
            height: 16px;
            accent-color: #007AFF;
            cursor: pointer;
        }

        input[type="number"] {
            width: 60px;
            background: #2a2a2a;
            color: #fff;
            text-align: center;
        }

        #loading-status {
            color: #aaa;
            margin-left: 10px;
        }

        #fullscreen-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: black;
            z-index: 9999;
        }

        #fullscreen-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 10px;
            background: #1a1a1a;
            border-top: 1px solid #333;
            font-size: 12px;
            color: #aaa;
        }
    </style>
</head>
<body>
    <div id="main-container">
        <div id="slideshow-container">
            <img id="slideshow-image" alt="Slideshow Image" />
        </div>

        <div id="thumbnail-history">
            <div class="thumbnail-container"></div>
        </div>

        <div id="controls">
            <div class="control-row">
                <button id="toggleButton" style="background: #28a745; font-weight: bold; margin-right: 15px;">Begin</button>
                <textarea 
                    id="prompt-textarea" 
                    placeholder="Enter your image prompt here (e.g., 'majestic mountain landscape, sunset' or 'futuristic cityscape with neon lights')"
                ></textarea>
                <button id="fullscreenButton">Fullscreen</button>
                <span id="loading-status"></span>
            </div>

            <div class="control-row" style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #333;">
                <select id="model-select">
                    <option value="unity">Model: Unity (Default)</option>
                    <option value="flux">Flux</option>
                    <option value="flux-realism">Flux Realism</option>
                    <option value="flux-cablyai">Flux CablyAI</option>
                    <option value="flux-anime">Flux Anime</option>
                    <option value="flux-3d">Flux 3D</option>
                    <option value="any-dark">Any Dark</option>
                    <option value="flux-pro">Flux Pro</option>
                    <option value="turbo">Turbo</option>
                </select>

                <select id="aspect-ratio">
                    <option value="16:9">16:9 (1920×1080)</option>
                    <option value="1:1">1:1 (2048×2048)</option>
                </select>

                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="private-mode" /> Private Mode
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" id="enhance-mode" /> Enhance
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" id="refine-mode" /> Refine
                    </label>
                </div>

                <label class="checkbox-label">
                    Change Every:
                    <input type="number" id="intervalInput" min="5" style="width: 60px;" value="30" /> seconds
                </label>
            </div>
        </div>
    </div>

    <div id="fullscreen-container">
        <img id="fullscreen-image" alt="Fullscreen Image" />
    </div>

    <script>
        const imageApiUrl = 'https://image.pollinations.ai/prompt/';
        let slideshowInterval;
        let imageHistory = [];
        const MAX_HISTORY = 10;
        let isLoading = false;

        function getImageDimensions() {
            const ratio = document.getElementById('aspect-ratio').value;
            return ratio === '16:9' ? { width: 1920, height: 1080 } : { width: 2048, height: 2048 };
        }

        function buildImageUrl(prompt) {
            const dims = getImageDimensions();
            const model = document.getElementById('model-select').value;
            const isPrivate = document.getElementById('private-mode').checked;
            const enhance = document.getElementById('enhance-mode').checked;
            const refine = document.getElementById('refine-mode').checked;
            
            let url = `${imageApiUrl}${encodeURIComponent(prompt)}?`;
            url += `nologo=true`;
            url += `&width=${dims.width}&height=${dims.height}`;
            url += `&model=${model}`;
            if (isPrivate) url += '&private=true';
            if (enhance) url += '&enhance=true';
            if (refine) url += '&refine=true';
            url += `&seed=${Math.floor(Math.random() * 1000000)}`;
            
            return url;
        }

        function preloadImage(url) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => resolve(img);
                img.onerror = () => reject(new Error(`Failed to load image: ${url}`));
                img.src = url;
            });
        }

        async function updateSlideshow() {
            if (isLoading) return;
            
            let prompt = document.getElementById('prompt-textarea').value.trim();
            if (!prompt) {
                prompt = "random image, random styles";
            }
            
            const imageUrl = buildImageUrl(prompt);
            
            document.getElementById('loading-status').textContent = 'Loading next image...';
            isLoading = true;

            try {
                await preloadImage(imageUrl);
                
                document.getElementById('slideshow-image').src = imageUrl;
                document.getElementById('fullscreen-image').src = imageUrl;
                
                addToHistory(imageUrl, prompt);
            } catch (error) {
                console.error('Failed to load image:', error);
            } finally {
                document.getElementById('loading-status').textContent = '';
                isLoading = false;
            }
        }

        function addToHistory(imageUrl, prompt) {
            if (!imageHistory.some(image => image.url === imageUrl)) {
                imageHistory.unshift({ url: imageUrl, prompt: prompt });
                if (imageHistory.length > MAX_HISTORY) {
                    imageHistory.pop();
                }
                updateThumbnails();
            }
        }

        function updateThumbnails() {
            const container = document.querySelector('.thumbnail-container');
            container.innerHTML = '';
            
            imageHistory.forEach((image, index) => {
                const thumb = document.createElement('img');
                thumb.src = image.url;
                thumb.classList.add('thumbnail');
                thumb.title = image.prompt;
                thumb.onclick = () => showHistoricalImage(index);
                container.appendChild(thumb);
            });
        }

        function showHistoricalImage(index) {
            const image = imageHistory[index];
            document.getElementById('slideshow-image').src = image.url;
            document.getElementById('fullscreen-image').src = image.url;
        }

        function toggleScreensaver() {
            const toggleButton = document.getElementById('toggleButton');
            
            if (slideshowInterval) {
                clearInterval(slideshowInterval);
                slideshowInterval = null;
                toggleButton.textContent = 'Start Screensaver';
            } else {
                updateSlideshow();
                const interval = Math.max(5000, parseInt(document.getElementById('intervalInput').value, 10) * 1000);
                slideshowInterval = setInterval(updateSlideshow, interval);
                toggleButton.textContent = 'Stop Screensaver';
            }
        }

        function toggleFullscreen() {
            const fullscreenContainer = document.getElementById('fullscreen-container');
            
            if (!document.fullscreenElement) {
                fullscreenContainer.style.display = 'block';
                fullscreenContainer.requestFullscreen().catch(err => {
                    console.error('Fullscreen error:', err);
                    fullscreenContainer.style.display = 'none';
                });
            } else {
                document.exitFullscreen();
            }
        }

        // Event Listeners
        document.getElementById('toggleButton').addEventListener('click', toggleScreensaver);
        document.getElementById('fullscreenButton').addEventListener('click', toggleFullscreen);
        
        document.addEventListener('fullscreenchange', () => {
            const fullscreenContainer = document.getElementById('fullscreen-container');
            if (!document.fullscreenElement) {
                setTimeout(() => {
                    fullscreenContainer.style.display = 'none';
                }, 100);
            }
        });

        document.getElementById('intervalInput').addEventListener('change', () => {
            if (slideshowInterval) {
                toggleScreensaver(); // Stop
                toggleScreensaver(); // Restart with new interval
            }
        });

        // Monitor changes that should trigger new image generation
        ['model-select', 'aspect-ratio'].forEach(id => {
            document.getElementById(id).addEventListener('change', () => {
                if (slideshowInterval) {
                    updateSlideshow(); // Generate new image with new settings
                }
            });
        });

        ['private-mode', 'enhance-mode', 'refine-mode'].forEach(id => {
            document.getElementById(id).addEventListener('change', () => {
                if (slideshowInterval) {
                    updateSlideshow(); // Generate new image with new settings
                }
            });
        });

        // Add event listener for textarea changes
        document.getElementById('prompt-textarea').addEventListener('change', () => {
            if (slideshowInterval) {
                updateSlideshow(); // Generate new image when prompt changes
            }
        });
    </script>
</body>
</html>
