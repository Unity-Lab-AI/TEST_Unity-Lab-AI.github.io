<b:if cond='data:blog.url == "https://unitylabai.blogspot.com/p/products.html"'>
<style type='text/css'>
.products-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background: transparent;
}

.product-item {
  display: flex;
  background: rgba(30, 30, 30, 0.9);
  border: 1px solid #333;
  border-radius: 8px;
  margin-bottom: 20px;
  overflow: hidden;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  position: relative;
  padding: 15px;
  gap: 15px;
}

.product-item:nth-child(odd) {
  background: rgba(40, 40, 40, 0.9);
}

.product-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

.product-image-container {
  width: 200px;
  min-width: 200px;
  background: #1a1a1a;
  border-radius: 4px;
  overflow: hidden;
}

.product-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

.product-details {
  padding: 5px 0;
  flex: 1;
  display: flex;
  flex-direction: column;
}

.product-header {
  margin-bottom: 15px;
}

.product-title {
  margin: 0 0 5px 0;
  font-size: 1.4em;
  color: #fff;
}

.product-date {
  font-size: 0.9em;
  color: #aaa;
}

.product-preview {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-height: 1.5;
  color: #ddd;
  margin-bottom: 15px;
}

.product-actions {
  margin-top: auto;
  display: flex;
  gap: 10px;
}

.product-content {
  display: none;
  color: #ddd;
}

/* New expanded state styles */
.product-item.expanded {
  flex-direction: column;
}

.product-item.expanded .product-image-container {
  float: left;
  margin: 0 20px 10px 0;
}

.product-item.expanded .product-content {
  display: block;
  clear: none;
  padding-top: 20px;
}

.product-item.expanded .product-preview {
  display: none;
}

.product-link {
  display: inline-block;
  padding: 8px 16px;
  background: #2c3e50;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  font-size: 0.9em;
  transition: background 0.2s ease;
}

.product-link:hover {
  background: #34495e;
}

.product-expand {
  padding: 8px 16px;
  background: #333;
  color: #fff;
  border: 1px solid #444;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9em;
  transition: background 0.2s ease;
}

.product-expand:hover {
  background: #444;
}

.product-content pre,
.product-content code {
  background: #1a1a1a;
  border: 1px solid #333;
  color: #ddd;
  clear: both;
  margin: 15px 0;
  padding: 15px;
  border-radius: 4px;
}

#loading, #no-products {
  text-align: center;
  padding: 40px;
  color: #aaa;
  font-style: italic;
}

@media (max-width: 600px) {
  .product-item {
    flex-direction: column;
  }
  
  .product-image-container {
    width: 100%;
    height: 200px;
  }
  
  .product-item.expanded .product-image-container {
    float: none;
    margin: 0 0 15px 0;
  }
}
</style>

<div class='products-container' id='productsContainer'>
  <div id='loading'>Loading products...</div>
</div>

<script type='text/javascript'>
//<![CDATA[
document.addEventListener('DOMContentLoaded', function() {
  const container = document.getElementById('productsContainer');
  const loadingEl = document.getElementById('loading');
  
  function formatDate(dateStr) {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }
  
  function extractFirstImage(content) {
    const imgMatch = content.match(/<img[^>]+src="([^">]+)"/);
    return imgMatch ? imgMatch[1] : 'https://via.placeholder.com/200x200';
  }
  
  function createProductItem(post) {
    const item = document.createElement('article');
    item.className = 'product-item';
    
    const image = extractFirstImage(post.content);
    let content = post.content;
    
    // Remove first image from content
    if (image) {
      content = content.replace(/<img[^>]+>/, '');
    }
    
    // Create preview text by removing HTML and limiting length
    const preview = content.replace(/<[^>]+>/g, '').slice(0, 200) + '...';
    
    item.innerHTML = `
      <div class="product-image-container">
        <img src="${image}" alt="${post.title}" class="product-image">
      </div>
      <div class="product-details">
        <div class="product-header">
          <h2 class="product-title">${post.title}</h2>
          <div class="product-date">${formatDate(post.published)}</div>
        </div>
        <div class="product-preview">${preview}</div>
        <div class="product-actions">
          <a href="${post.url}" class="product-link">View Full Details</a>
          <button class="product-expand">Quick View</button>
        </div>
        <div class="product-content">${content}</div>
      </div>
    `;
    
    // Add expand functionality
    const expandBtn = item.querySelector('.product-expand');
    expandBtn.addEventListener('click', () => {
      const isExpanded = item.classList.toggle('expanded');
      expandBtn.textContent = isExpanded ? 'Show Less' : 'Quick View';
    });
    
    return item;
  }
  
  async function fetchProducts() {
    try {
      const response = await fetch('/feeds/posts/default/-/Product?alt=json-in-script&max-results=500');
      const data = await response.text();
      const jsonData = JSON.parse(data.replace(/^.*?({.*}).*?$/, '$1'));
      
      if (!jsonData.feed.entry) {
        container.innerHTML = '<div id="no-products">No products found.</div>';
        return;
      }
      
      const products = jsonData.feed.entry.map(entry => ({
        title: entry.title.$t,
        content: entry.content.$t,
        published: entry.published.$t,
        url: entry.link.find(link => link.rel === 'alternate').href
      }));
      
      loadingEl.remove();
      products.forEach(product => {
        container.appendChild(createProductItem(product));
      });
      
    } catch (error) {
      console.error('Error fetching products:', error);
      container.innerHTML = '<div id="no-products">Error loading products. Please try again later.</div>';
    }
  }
  
  fetchProducts();
});
//]]>
</script>
</b:if>
